plugins {
    java
    `java-library`
    checkstyle
    `kotlin-dsl` apply false
}

repositories {
    mavenCentral()
}

val generatedDir = file("${buildDir}/generated/src/main/java")
val jmhDir = file("${projectDir}/src/jmh/java")

sourceSets {
    val generated by creating {
        java.srcDir(file(generatedDir))
    }
    val jmh by creating {
        java.srcDirs(file(jmhDir), file("${projectDir}/src/main/java"), file(generatedDir))
    }
}

configurations {
    compileOnly {
        extendsFrom(configurations.annotationProcessor.get())
    }
    testCompileOnly {
        extendsFrom(configurations.annotationProcessor.get())
    }
}

dependencies {
    checkstyle(libs.checkstyle)
    implementation(project(":eider-internals"))
    implementation(project(":eider-processor"))
    implementation(libs.agrona)
    "jmhImplementation"(libs.jmhCore)
    "jmhAnnotationProcessor"(libs.jmhAnnotationProcessor)
    "jmhImplementation"(libs.agrona)
    "jmhImplementation"(project(":eider-internals"))
    "jmhImplementation"(project(":eider-processor"))

    annotationProcessor(project(":eider-processor"))
    annotationProcessor(libs.jmhAnnotationProcessor)

    testRuntimeOnly(libs.jupiterEngine)
    testRuntimeOnly(libs.agrona)
    "generatedImplementation"(libs.agrona)
    testImplementation(libs.jupiterApi)
    testImplementation(libs.agrona)
    testImplementation(project(":eider-processor"))
}

tasks {
    compileJava {
        val generatedSourceDir = project . file ("build/generated/src/main/java")
        project.mkdir(generatedSourceDir)
        options.generatedSourceOutputDirectory.set(file(generatedSourceDir))
        outputs.dir(generatedSourceDir)
    }
    "compileGeneratedJava" {
        dependsOn("compileTestJava")
    }
    "compileJmhJava" {
        dependsOn("compileJava")
    }
    "checkstyleJmh" {
        dependsOn("compileJava")
    }
    create<Delete>("cleanGeneratedJmh") {
        delete {
            file("build/generated/sources/annotationProcessor/java/jmh")
        }
    }
    register("jmh", type=JavaExec::class) {
        dependsOn("jmhClasses", "cleanGeneratedJmh")
        group = "benchmark"
        mainClass.set("org.openjdk.jmh.Main")
        classpath = sourceSets["jmh"].runtimeClasspath
    }
}


testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use JUnit Jupiter test framework
            useJUnitJupiter(libs.versions.junitVersion.get())
        }
    }
}
